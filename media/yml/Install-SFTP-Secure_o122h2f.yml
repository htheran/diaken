---
- name: Instalar y configurar SFTP seguro (OpenSSH)
  hosts: target_host
  become: yes
  tasks:
    # Fase 0: Validación de variables
    - name: Validar variables requeridas
      debug:
        msg: "Validando variables para el host: {{ target_host }}"
      tags:
        - always

    - name: Establecer variables por defecto si no están definidas
      set_fact:
        server_root: "{{ server_root | default('/opt/www/sites') }}"
        ftp_user: "{{ ftp_user | default('ftpuser') }}"
        ftp_password: "{{ ftp_password | default('changeme') }}"
        apache_group: "{{ apache_group | default('apache') }}"
        sftp_group: "{{ sftp_group | default('sftpusers') }}"
      tags:
        - always

    # Fase 1: Limpieza de instalaciones anteriores
    - name: Detener y eliminar servicios FTP anteriores
      block:
        - name: Detener servicio VSFTPD si existe
          service:
            name: vsftpd
            state: stopped
            enabled: no
          ignore_errors: yes
          
        - name: Eliminar paquete VSFTPD
          package:
            name: vsftpd
            state: absent
          ignore_errors: yes
          
        - name: Detener servicio ProFTPD si existe
          service:
            name: proftpd
            state: stopped
            enabled: no
          ignore_errors: yes
          
        - name: Eliminar paquete ProFTPD
          package:
            name: proftpd
            state: absent
          ignore_errors: yes
      ignore_errors: yes
      tags:
        - cleanup

    # Fase 2: Verificar instalación de OpenSSH
    - name: Verificar si OpenSSH está instalado
      package:
        name: openssh-server
        state: present
      tags:
        - install

    # Fase 3: Configuración de usuarios y grupos
    - name: Crear grupo SFTP
      group:
        name: "{{ sftp_group }}"
        state: present
      tags:
        - users

    - name: Verificar si el usuario SFTP existe
      getent:
        database: passwd
        key: "{{ ftp_user }}"
      register: sftp_user_exists
      ignore_errors: yes
      tags:
        - users

    - name: Crear usuario SFTP si no existe
      user:
        name: "{{ ftp_user }}"
        password: "{{ ftp_password | password_hash('sha512') }}"
        groups: "{{ sftp_group }},{{ apache_group }}"
        append: yes
        shell: /bin/bash
        home: "/home/{{ ftp_user }}"
        create_home: yes
      when: sftp_user_exists.failed is defined and sftp_user_exists.failed
      tags:
        - users

    # Fase 4: Configuración de directorios
    - name: Crear estructura de directorios para SFTP
      block:
        - name: Crear directorio raíz para SFTP
          file:
            path: "/home/{{ ftp_user }}"
            state: directory
            owner: root
            group: root
            mode: '0755'
          
        - name: Crear directorio de carga para SFTP
          file:
            path: "/home/{{ ftp_user }}/upload"
            state: directory
            owner: "{{ ftp_user }}"
            group: "{{ apache_group }}"
            mode: '0755'
          
        - name: Crear enlace simbólico al directorio web
          file:
            src: "{{ server_root }}/{{ target_host }}"
            dest: "/home/{{ ftp_user }}/www"
            state: link
            owner: "{{ ftp_user }}"
            group: "{{ apache_group }}"
      tags:
        - directories

    - name: Verificar directorio del sitio web
      stat:
        path: "{{ server_root }}/{{ target_host }}"
      register: web_dir_stat
      tags:
        - directories

    - name: Crear directorio para el sitio web si no existe
      file:
        path: "{{ server_root }}/{{ target_host }}"
        state: directory
        owner: "{{ ftp_user }}"
        group: "{{ apache_group }}"
        mode: '0755'
      when: not web_dir_stat.stat.exists
      tags:
        - directories

    - name: Establecer permisos correctos en el directorio web
      shell: |
        chown -R {{ ftp_user }}:{{ apache_group }} {{ server_root }}/{{ target_host }}
        chmod -R 755 {{ server_root }}/{{ target_host }}
        find {{ server_root }}/{{ target_host }} -type f -exec chmod 644 {} \;
      ignore_errors: yes
      tags:
        - directories

    # Fase 5: Configuración de SSH
    - name: Hacer backup de la configuración SSH
      copy:
        src: /etc/ssh/sshd_config
        dest: /etc/ssh/sshd_config.bak.{{ ansible_date_time.date }}
        remote_src: yes
      tags:
        - configure

    - name: Verificar si ya existe configuración SFTP
      shell: grep -q "Match Group {{ sftp_group }}" /etc/ssh/sshd_config || echo "no"
      register: sftp_config_exists
      changed_when: false
      tags:
        - configure

    - name: Añadir configuración SFTP a sshd_config
      blockinfile:
        path: /etc/ssh/sshd_config
        block: |
          # Configuración SFTP añadida por Install-SFTP-Secure.yml
          Subsystem sftp internal-sftp
          
          # Configuración específica para usuarios SFTP
          Match Group {{ sftp_group }}
              ChrootDirectory /home/%u
              ForceCommand internal-sftp
              AllowTcpForwarding no
              X11Forwarding no
        marker: "# {mark} ANSIBLE MANAGED BLOCK FOR SFTP"
      when: sftp_config_exists.stdout == "no"
      register: ssh_config_changed
      tags:
        - configure

    # Fase 6: Reiniciar servicio SSH
    - name: Verificar configuración de SSH
      command: sshd -t
      register: sshd_test
      changed_when: false
      ignore_errors: yes
      tags:
        - service

    - name: Mostrar errores de configuración SSH si existen
      debug:
        msg: "Error en la configuración de SSH: {{ sshd_test.stderr }}"
      when: sshd_test.rc != 0
      tags:
        - service

    - name: Reiniciar servicio SSH
      service:
        name: sshd
        state: restarted
      when: ssh_config_changed.changed and sshd_test.rc == 0
      register: ssh_restarted
      tags:
        - service

    # Fase 7: Configuración de firewall
    - name: Verificar si firewalld está instalado
      command: which firewall-cmd
      register: firewalld_check
      ignore_errors: yes
      changed_when: false
      tags:
        - firewall

    - name: Permitir servicio SSH en firewall
      firewalld:
        service: ssh
        permanent: yes
        state: enabled
      when: firewalld_check.rc == 0
      ignore_errors: yes
      tags:
        - firewall

    - name: Recargar firewall
      command: firewall-cmd --reload
      when: firewalld_check.rc == 0
      ignore_errors: yes
      changed_when: true
      tags:
        - firewall

    # Fase 8: Verificación
    - name: Verificar estado del servicio SSH
      command: systemctl status sshd
      register: ssh_status
      ignore_errors: yes
      changed_when: false
      tags:
        - verify

    - name: Mostrar estado del servicio SSH
      debug:
        msg: "{{ ssh_status.stdout_lines }}"
      tags:
        - verify

    # Fase 9: Actualizar index.html
    - name: Verificar si existe index.html
      stat:
        path: "{{ server_root }}/{{ target_host }}/index.html"
      register: index_exists
      tags:
        - index

    - name: Actualizar index.html con estado de SFTP
      block:
        - name: Leer contenido actual de index.html
          slurp:
            src: "{{ server_root }}/{{ target_host }}/index.html"
          register: index_content
          when: index_exists.stat.exists
          
        - name: Decodificar contenido
          set_fact:
            decoded_content: "{{ index_content['content'] | b64decode }}"
          when: index_exists.stat.exists
          
        - name: Verificar si ya existe badge de FTP
          set_fact:
            has_ftp_badge: "{{ decoded_content | regex_search('FTP Status') != None }}"
          when: index_exists.stat.exists
          
        - name: Añadir badge de SFTP si no existe
          replace:
            path: "{{ server_root }}/{{ target_host }}/index.html"
            regexp: '(<div class="container mt-5">.*?<h1>)'
            replace: '\1<div class="alert alert-success mb-4"><strong>FTP Status:</strong> SFTP Configured and Running ({{ ansible_date_time.date }})</div>'
          when: index_exists.stat.exists and (has_ftp_badge is not defined or not has_ftp_badge)
          
        - name: Actualizar badge de FTP si ya existe
          replace:
            path: "{{ server_root }}/{{ target_host }}/index.html"
            regexp: '<div class="alert alert-(success|warning|danger) mb-4"><strong>FTP Status:</strong>.*?</div>'
            replace: '<div class="alert alert-success mb-4"><strong>FTP Status:</strong> SFTP Configured and Running ({{ ansible_date_time.date }})</div>'
          when: index_exists.stat.exists and has_ftp_badge is defined and has_ftp_badge
      when: index_exists.stat.exists and ssh_restarted.failed is not defined
      ignore_errors: yes
      tags:
        - index

    # Fase 10: Resumen y recomendaciones
    - name: Mensaje de diagnóstico y recomendaciones
      debug:
        msg: |
          Instalación de SFTP completada:
          - Host: {{ target_host }}
          - Estado del servicio: {{ 'Activo' if ssh_restarted.failed is not defined else 'Inactivo' }}
          - Directorio web: {{ server_root }}/{{ target_host }}
          - Directorio SFTP: /home/{{ ftp_user }}/www (enlace simbólico al directorio web)
          - Usuario SFTP: {{ ftp_user }}
          
          Para probar la conexión SFTP:
          - Servidor: {{ target_host }}
          - Puerto: 22 (SSH estándar)
          - Usuario: {{ ftp_user }}
          - Contraseña: {{ ftp_password }}
          - Protocolo: SFTP (SSH File Transfer Protocol)
          
          Ventajas de SFTP frente a FTP/FTPS:
          1. Seguridad integrada a través de SSH, sin necesidad de configuración adicional de SSL/TLS
          2. Autenticación robusta con soporte para claves públicas/privadas
          3. Encriptación de todo el tráfico, no solo las credenciales
          4. Mejor rendimiento en conexiones con alta latencia
          5. Compatibilidad con todos los clientes SFTP modernos (FileZilla, WinSCP, etc.)
          6. No requiere puertos adicionales para modo pasivo
          
          Clientes recomendados:
          - FileZilla: Seleccionar protocolo SFTP
          - WinSCP: Seleccionar protocolo SFTP
          - Cyberduck: Seleccionar protocolo SFTP
      tags:
        - always
