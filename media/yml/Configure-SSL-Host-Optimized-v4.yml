---
- name: Configuración de SSL/HTTPS para Apache en hosts
  hosts: target_host
  become: yes
  tasks:
    # Fase 0: Validación de variables
    - name: Validar variables requeridas
      debug:
        msg: "Validando variables para el host: {{ target_host }}"
      tags:
        - always

    - name: Establecer variables por defecto si no están definidas
      set_fact:
        server_root: "{{ server_root | default('/opt/www/sites') }}"
        log_root: "{{ log_root | default('/var/log/httpd') }}"
        http_port: "{{ http_port | default(80) }}"
        https_port: "{{ https_port | default(443) }}"
        domain: "{{ domain | default('upb.edu.co') }}"
        subdomain: "{{ subdomain | default(target_host) }}"
        ssl_cert_dir: "{{ ssl_cert_dir | default('/etc/ssl/httpd') }}"
      tags:
        - always

    # Fase 1: Verificación previa y diagnóstico
    - name: Verificar si Apache está instalado
      command: which httpd
      register: httpd_installed
      ignore_errors: yes
      changed_when: false
      tags:
        - diagnose

    - name: Mostrar advertencia si Apache no está instalado
      debug:
        msg: "ADVERTENCIA: Apache no está instalado. Por favor, instale Apache primero usando el playbook Install HTTPD Host (Optimized v2)."
      when: httpd_installed.rc != 0
      tags:
        - diagnose

    - name: Verificar si el módulo SSL ya está habilitado
      shell: httpd -M | grep ssl
      register: ssl_loaded
      ignore_errors: yes
      changed_when: false
      when: httpd_installed.rc == 0
      tags:
        - ssl

    - name: Verificar si mod_rewrite está habilitado
      shell: httpd -M | grep rewrite || echo "not loaded"
      register: rewrite_loaded
      ignore_errors: yes
      changed_when: false
      when: httpd_installed.rc == 0
      tags:
        - ssl

    # Fase 2: Instalación y configuración de módulos
    - name: Instalar mod_ssl si no está instalado
      package:
        name: mod_ssl
        state: present
      when: httpd_installed.rc == 0 and ssl_loaded is failed
      tags:
        - ssl

    - name: Habilitar mod_rewrite si no está cargado
      shell: a2enmod rewrite || echo "mod_rewrite no se pudo habilitar con a2enmod, podría requerir instalación manual"
      when: httpd_installed.rc == 0 and "'not loaded' in rewrite_loaded.stdout"
      ignore_errors: yes
      tags:
        - ssl

    # Fase 3: Preparación de directorios y limpieza
    - name: Crear directorio para certificados
      file:
        path: "{{ ssl_cert_dir }}"
        state: directory
        mode: '0755'
      when: httpd_installed.rc == 0
      tags:
        - ssl

    - name: Crear directorio de logs si no existe
      file:
        path: "{{ log_root }}/{{ target_host }}"
        state: directory
        mode: '0755'
      when: httpd_installed.rc == 0
      tags:
        - ssl

    # Fase 4: Manejo del archivo ssl.conf
    - name: Verificar si el archivo ssl.conf existe
      stat:
        path: /etc/httpd/conf.d/ssl.conf
      register: ssl_conf_stat
      when: httpd_installed.rc == 0
      tags:
        - ssl

    - name: Hacer backup del archivo ssl.conf si existe
      copy:
        src: /etc/httpd/conf.d/ssl.conf
        dest: "/etc/httpd/conf.d/ssl.conf.bak.{{ ansible_date_time.date }}_{{ ansible_date_time.time | regex_replace(':', '') }}"
        remote_src: yes
      when: httpd_installed.rc == 0 and ssl_conf_stat.stat.exists
      ignore_errors: yes
      tags:
        - ssl

    - name: Eliminar archivo ssl.conf problemático
      file:
        path: /etc/httpd/conf.d/ssl.conf
        state: absent
      when: httpd_installed.rc == 0 and ssl_conf_stat.stat.exists
      tags:
        - ssl

    - name: Crear archivo ssl.conf mínimo
      copy:
        content: |
          # Archivo ssl.conf mínimo generado por Configure-SSL-Host-Optimized-v4.yml
          LoadModule ssl_module modules/mod_ssl.so
          Listen {{ https_port }} https
          SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog
          SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
          SSLSessionCacheTimeout  300
          SSLCryptoDevice builtin
        dest: /etc/httpd/conf.d/ssl.conf
        mode: '0644'
      when: httpd_installed.rc == 0
      tags:
        - ssl

    # Fase 5: Limpieza de configuraciones anteriores
    - name: Eliminar configuraciones SSL problemáticas
      shell: |
        rm -f /etc/httpd/conf.d/ssl.conf.rpmsave
        rm -f /etc/httpd/conf.d/ssl.conf.rpmnew
      ignore_errors: yes
      when: httpd_installed.rc == 0
      tags:
        - cleanup

    - name: Eliminar configuración SSL anterior si existe
      file:
        path: "/etc/httpd/conf.d/{{ target_host }}-ssl.conf"
        state: absent
      when: httpd_installed.rc == 0
      tags:
        - ssl

    - name: Eliminar configuración de redirección anterior si existe
      file:
        path: "/etc/httpd/conf.d/{{ target_host }}-redirect.conf"
        state: absent
      when: httpd_installed.rc == 0
      tags:
        - ssl

    # Fase 6: Instalación de certificados
    - name: Copiar certificado SSL al servidor
      copy:
        src: "/opt/www/media/templates/ssl/certificado.crt"
        dest: "{{ ssl_cert_dir }}/{{ target_host }}.certificado.crt"
        mode: '0644'
      when: httpd_installed.rc == 0
      register: cert_copy
      tags:
        - ssl

    - name: Copiar clave privada SSL al servidor
      copy:
        src: "/opt/www/media/templates/ssl/certificado.key"
        dest: "{{ ssl_cert_dir }}/{{ target_host }}.certificado.key"
        mode: '0600'
      when: httpd_installed.rc == 0
      register: key_copy
      tags:
        - ssl

    - name: Verificar si los certificados se copiaron correctamente
      debug:
        msg: "Certificados copiados correctamente: {{ cert_copy.changed or key_copy.changed }}"
      when: httpd_installed.rc == 0
      tags:
        - ssl

    # Fase 7: Configuración de VirtualHosts
    - name: Configurar VirtualHost para HTTPS
      template:
        src: "/opt/www/media/templates/host/virtualhost-ssl.conf.j2"
        dest: "/etc/httpd/conf.d/{{ target_host }}-ssl.conf"
        mode: '0644'
      when: httpd_installed.rc == 0
      register: ssl_config
      tags:
        - ssl

    - name: Configurar redirección HTTP a HTTPS
      template:
        src: "/opt/www/media/templates/host/virtualhost-redirect.conf.j2"
        dest: "/etc/httpd/conf.d/{{ target_host }}-redirect.conf"
        mode: '0644'
      when: httpd_installed.rc == 0
      register: redirect_config
      tags:
        - ssl

    # Fase 8: Actualizar index.html con información de SSL
    - name: Verificar si existe el archivo index.html
      stat:
        path: "{{ server_root }}/{{ target_host }}/index.html"
      register: index_stat
      when: httpd_installed.rc == 0
      tags:
        - ssl

    - name: Crear copia de seguridad del index.html si existe
      copy:
        src: "{{ server_root }}/{{ target_host }}/index.html"
        dest: "{{ server_root }}/{{ target_host }}/index.html.bak.{{ ansible_date_time.date }}"
        remote_src: yes
      when: httpd_installed.rc == 0 and index_stat.stat.exists
      tags:
        - ssl

    - name: Actualizar index.html con información de SSL
      block:
        - name: Leer contenido del archivo index.html
          slurp:
            src: "{{ server_root }}/{{ target_host }}/index.html"
          register: index_content
          when: index_stat.stat.exists

        - name: Actualizar index.html con badge de SSL
          copy:
            content: "{{ index_content['content'] | b64decode | regex_replace('<div class=\"success-badge\">[\\s\\S]*?</div>', '<div class=\"success-badge\">\n            <i class=\"bi bi-check-circle-fill\"></i>\n            Deployment Successful\n        </div>\n        <div class=\"success-badge\" style=\"background: rgba(16, 185, 129, 0.12); color: var(--accent-green);\">\n            <i class=\"bi bi-shield-check\"></i>\n            SSL Configured\n        </div>') | regex_replace('<div class=\"info-value\">.*?</div>', '<div class=\"info-value\">' + ansible_date_time.date + ' ' + ansible_date_time.time + '</div>') }}"
            dest: "{{ server_root }}/{{ target_host }}/index.html"
          when: index_stat.stat.exists
      when: httpd_installed.rc == 0 and index_stat.stat.exists
      ignore_errors: yes
      tags:
        - ssl

    # Fase 9: Verificación y reinicio de servicios
    - name: Verificar configuración de Apache
      command: httpd -t
      register: apache_config_test
      changed_when: false
      ignore_errors: yes
      when: httpd_installed.rc == 0
      tags:
        - ssl

    - name: Mostrar error de configuración si existe
      debug:
        msg: "Error en la configuración de Apache: {{ apache_config_test.stderr }}"
      when: httpd_installed.rc == 0 and apache_config_test.rc != 0
      tags:
        - ssl

    - name: Reiniciar Apache si la configuración es válida
      service:
        name: httpd
        state: restarted
      when: httpd_installed.rc == 0 and apache_config_test.rc == 0
      tags:
        - ssl

    # Fase 10: Configuración de firewall
    - name: Abrir puerto HTTPS en el firewall
      shell: |
        if systemctl status firewalld &>/dev/null; then
          firewall-cmd --permanent --add-port={{ https_port }}/tcp
          firewall-cmd --reload
        elif which iptables &>/dev/null; then
          iptables -I INPUT -p tcp --dport {{ https_port }} -j ACCEPT
          service iptables save || true
        else
          echo "No se encontró firewalld ni iptables"
        fi
      ignore_errors: yes
      when: httpd_installed.rc == 0
      tags:
        - ssl

    # Fase 11: Resumen final
    - name: Mensaje de confirmación
      debug:
        msg: |
          Configuración SSL completada:
          - Host: {{ target_host }}
          - Puerto HTTPS: {{ https_port }}
          - Certificado: {{ ssl_cert_dir }}/{{ target_host }}.certificado.crt
          - Estado de la configuración: {{ 'Válida' if apache_config_test.rc == 0 else 'Con errores' }}
          - Index.html actualizado: {{ 'Sí' if index_stat.stat.exists else 'No (no existe el archivo)' }}
      when: httpd_installed.rc == 0
      tags:
        - ssl
